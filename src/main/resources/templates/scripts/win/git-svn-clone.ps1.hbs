[CmdletBinding()]
Param(
  [Parameter(Mandatory)]
  [string]$repoUrl,
  [Parameter(Mandatory)]
  [string]$username,
  [Parameter(Mandatory)]
  [string]$password,
  [Parameter(Mandatory)]
  [ValidateSet("r", "p", "t")]
  [string]$certificateAcceptResponse,
  [Parameter(Mandatory=$false)]
  [AllowEmptyString()]
  [string]$destination="",
  [Parameter(Mandatory=$false)]
  [string]$cloneOptions="",
  [switch]$outputStdout,
  [switch]$debugging
)

# Shamelessly stolen from https://stackoverflow.com/a/54933303
Function Await-Task {
  param (
    [Parameter(ValueFromPipeline=$true, Mandatory=$true)]
    $task
  )

  process {
    while (-not $task.AsyncWaitHandle.WaitOne(1000)) { if($debugging.IsPresent) { Write-Host "-> Waiting for task to complete" } }
    $task.GetAwaiter().GetResult()
  }
}

Function Read-Output {
  param (
    [Parameter(ValueFromPipeline=$true, Mandatory=$true)]
    $streamReader
  )

  process {
    $readContent = ""
    $bufferSize = 80
    $buffer = [Char[]]::new($bufferSize)
    do {
      if($debugging.IsPresent) {
        Write-Host "Task: reading output"
      }
      $readCount = $streamReader.ReadAsync($buffer, 0, $bufferSize) | Await-Task
      $readContent += $buffer[0..$readCount] -join ''
    } While($se.Peek() -ne -1)

    return $readContent
  }
}

$gitProgramPath = where.exe git
$gitArguments= "svn clone $repoUrl $destination --username=$username $cloneOptions"

$p = New-Object System.Diagnostics.Process;
$p.StartInfo.UseShellExecute = $false;
$p.StartInfo.FileName = $gitProgramPath;
$p.StartInfo.Arguments = $gitArguments
$p.StartInfo.CreateNoWindow = $true
$p.StartInfo.RedirectStandardInput = $true
$p.StartInfo.RedirectStandardOutput = $true
$p.StartInfo.RedirectStandardError = $true

if($debugging.IsPresent) {
  Write-Host "Starting command : $gitProgramPath $gitArguments"
}

[void]$p.Start()

$sw = $p.StandardInput
$sr = $p.StandardOutput
$se = $p.StandardError

if($debugging.IsPresent) {
  Write-Host "Waiting 5 seconds"
}

Start-Sleep -Seconds 5

if($debugging.IsPresent) {
  Write-Host "Reading Standard Error"
}

$readText = $se | Read-Output

if($debugging.IsPresent) {
  Write-Host "Text from Standard Error:`n$readText"
}

if($debugging.IsPresent) {
  Write-Host "Try finding predicate `"Couldn't chdir to `""
}

if($readText.Contains("Couldn't chdir to ")) {
  Write-Error "git svn is still running, please kill perl.exe and relaunch the command"
  exit 1
}
if($debugging.IsPresent) {
  Write-Host "Try finding predicate `"(R)eject, accept (t)emporarily or accept (p)ermanently?`""
}
if($readText.Contains("(R)eject, accept (t)emporarily or accept (p)ermanently?")) {
  if($debugging.IsPresent) {
    Write-Host "Found predicate `"(R)eject, accept (t)emporarily or accept (p)ermanently?`""
    Write-Host "Sending response : $certificateAcceptResponse"
  }

  switch($certificateAcceptResponse) {
    "r" { Write-Host "Rejecting certificate" }
    "t" { Write-Host "Accepting certificate temporarily" }
    "p" { Write-Host "Accepting certificate permanently" }
  }
  $sw.WriteLine($certificateAcceptResponse)
  if($debugging.IsPresent) {
    Write-Host "Waiting 5 seconds"
  }

  Start-Sleep -Seconds 5

  if($debugging.IsPresent) {
    Write-Host "Reading Standard Error"
  }
  $readText = $se | Read-Output
}

if($debugging.IsPresent) {
  Write-Host "Try finding predicate `"Password for `""
}

if($readText.Contains("Password for ")) {
  if($debugging.IsPresent) {
    Write-Host "Found predicate `"Password for `""
  }
  Write-Host "Entering password"
  $sw.WriteLine($password)
}

if($debugging.IsPresent) {
  Write-Host "Waiting for git svn command to complete ..."
}

$p.WaitForExit();

if($debugging.IsPresent) {
  Write-Host "Exited"
}

if($outputStdout.IsPresent) {
  Write-Host ($p.StandardOutput.ReadToEnd())
}
